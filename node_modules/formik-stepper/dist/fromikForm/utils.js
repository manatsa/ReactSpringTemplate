/// validation form
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from "react";
var getNames = function (parent) {
    var names = [];
    if (React.isValidElement(parent)) {
        var childrenArray = React.Children.toArray(parent.props.children);
        if (parent.props.name) {
            return parent.props.name;
        }
        if (childrenArray && childrenArray.length > 0) {
            for (var i = 0; i < childrenArray.length; i++) {
                var newNames = getNames(childrenArray[i]);
                if (Array.isArray(newNames)) {
                    names = __spreadArray(__spreadArray([], names, true), newNames, true);
                }
                else {
                    names = __spreadArray(__spreadArray([], names, true), [newNames], false);
                }
            }
            return names;
        }
    }
    return null;
};
/// If there is an error in any check field, you will be alerted with the danger color
export var validate = function (_a) {
    var errors = _a.errors, setTouched = _a.setTouched, setFieldError = _a.setFieldError, currentStep = _a.currentStep;
    if (errors && Object.keys(errors).length > 0) {
        var valid = true;
        var obj = {};
        var names = getNames(currentStep);
        for (var i = 0; i < names.length; i++) {
            var nameField = names[i];
            for (var key in errors) {
                if (key === nameField) {
                    valid = false;
                    obj[key] = errors[key];
                }
                else {
                    setFieldError(key, "");
                }
            }
        }
        if (valid) {
            setTouched({});
            return true;
        }
        else {
            setTouched(obj);
            return false;
        }
    }
    else {
        setTouched({});
        return true;
    }
};
